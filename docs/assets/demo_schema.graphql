scalar BigInt
scalar Cursor
scalar DateTime
scalar JSON
scalar UUID

type Query {
  account(nodeId: ID!): Account

  allAccounts(
    after: Cursor,
    before: Cursor,
    filter: AccountFilter,
    first: Int,
    last: Int,
    orderBy: [AccountOrderBy!]
  ): AccountConnection

  blog(nodeId: ID!): Blog

  allBlogs(
    after: Cursor,
    before: Cursor,
    filter: BlogFilter,
    first: Int,
    last: Int,
    orderBy: [BlogOrderBy!]
  ): BlogConnection

  blogPost(nodeId: ID!): BlogPost

  allBlogPosts(
    after: Cursor,
    before: Cursor,
    filter: BlogPostFilter,
    first: Int,
    last: Int,
    orderBy: [BlogPostOrderBy!]
  ): BlogPostConnection
}

type Account {
  nodeId: ID!
  id: Int!
  email: String!
  encryptedPassword: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  blogs(
    after: Cursor,
    before: Cursor,
    filter: BlogFilter,
    first: Int,
    last: Int,
    orderBy: [BlogOrderBy!]
  ): BlogConnection
}

type AccountConnection {
  edges: [AccountEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type AccountEdge {
  node: Account
  cursor: String!
}

input AccountFilter {
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  id: IntFilter
  email: StringFilter
  encryptedPassword: StringFilter
}

input AccountOrderBy {
  id: OrderByDirection
  email: OrderByDirection
  encryptedPassword: OrderByDirection
  createdAt: OrderByDirection
  updatedAt: OrderByDirection
}

type Blog {
  nodeId: ID!
  id: Int!
  ownerId: Int!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  owner: Account
  blogPosts(
    after: Cursor,
    before: Cursor,
    filter: BlogPostFilter,
    first: Int,
    last: Int,
    orderBy: [BlogPostOrderBy!]
  ): BlogPostConnection
}

type BlogConnection {
  edges: [BlogEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type BlogEdge {
  node: Blog
  cursor: String!
}

input BlogFilter {
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  id: IntFilter
  ownerId: IntFilter
  description: StringFilter
  name: StringFilter
}

input BlogOrderBy {
  id: OrderByDirection
  ownerId: OrderByDirection
  name: OrderByDirection
  description: OrderByDirection
  createdAt: OrderByDirection
  updatedAt: OrderByDirection
}

enum BlogPostStatus {
  PENDING
  RELEASED
}

type BlogPost {
  nodeId: ID!
  id: UUID!
  blogId: Int!
  title: String!
  body: String
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  blog(nodeId: ID!): Blog
}

type BlogPostConnection {
  edges: [BlogPostEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type BlogPostEdge {
  node: BlogPost
  cursor: String!
}

input BlogPostFilter {
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  blogId: IntFilter
  body: StringFilter
  status: StringFilter
  title: StringFilter
  id: UUIDFilter
}

input BlogPostOrderBy {
  id: OrderByDirection
  blogId: OrderByDirection
  title: OrderByDirection
  body: OrderByDirection
  status: OrderByDirection
  createdAt: OrderByDirection
  updatedAt: OrderByDirection
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

"""Defines a per-field sorting order"""
enum OrderByDirection {
  AscNullsFirst
  AscNullsLast
  DescNullsFirst
  DescNullsLast
}

"""
Boolean expression comparing fields on type "DateTime"
"""
input DateTimeFilter {
  eq: DateTime
}

"""
Boolean expression comparing fields on type "Int"
"""
input IntFilter {
  eq: Int
}

"""
Boolean expression comparing fields on type "String"
"""
input StringFilter {
  eq: String
}

"""
Boolean expression comparing fields on type "UUID"
"""
input UUIDFilter {
  eq: UUID
}
