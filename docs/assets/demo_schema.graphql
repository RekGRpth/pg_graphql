type Account {
  blogCollection(after: Cursor, before: Cursor, filter: BlogFilter, first: Int, last: Int, orderBy: [BlogOrderBy!]): BlogConnection
  createdAt: DateTime!
  email: String!
  encryptedPassword: String!
  id: Int!
  nodeId: ID!
  updatedAt: DateTime!
}

type AccountConnection {
  edges: [AccountEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type AccountEdge {
  cursor: String!
  node: Account
}

input AccountFilter {
  createdAt: DateTimeFilter
  email: StringFilter
  encryptedPassword: StringFilter
  id: IntFilter
  updatedAt: DateTimeFilter
}

input AccountOrderBy {
  createdAt: OrderByDirection
  email: OrderByDirection
  encryptedPassword: OrderByDirection
  id: OrderByDirection
  updatedAt: OrderByDirection
}

scalar BigInt

"""
Boolean expression comparing fields on type "BigInt"
"""
input BigIntFilter {
  eq: BigInt
}

type Blog {
  blogPostCollection(after: Cursor, before: Cursor, filter: BlogPostFilter, first: Int, last: Int, orderBy: [BlogPostOrderBy!]): BlogPostConnection
  createdAt: DateTime!
  description: String
  id: Int!
  name: String!
  nodeId: ID!
  owner: Account
  ownerId: Int!
  updatedAt: DateTime!
}

type BlogConnection {
  edges: [BlogEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type BlogEdge {
  cursor: String!
  node: Blog
}

input BlogFilter {
  createdAt: DateTimeFilter
  description: StringFilter
  id: IntFilter
  name: StringFilter
  ownerId: IntFilter
  updatedAt: DateTimeFilter
}

input BlogOrderBy {
  createdAt: OrderByDirection
  description: OrderByDirection
  id: OrderByDirection
  name: OrderByDirection
  ownerId: OrderByDirection
  updatedAt: OrderByDirection
}

type BlogPost {
  blog: Blog
  blogId: Int!
  body: String
  createdAt: DateTime!
  id: UUID!
  nodeId: ID!
  status: String!
  title: String!
  updatedAt: DateTime!
}

type BlogPostConnection {
  edges: [BlogPostEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type BlogPostEdge {
  cursor: String!
  node: BlogPost
}

input BlogPostFilter {
  blogId: IntFilter
  body: StringFilter
  createdAt: DateTimeFilter
  id: UUIDFilter
  status: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input BlogPostOrderBy {
  blogId: OrderByDirection
  body: OrderByDirection
  createdAt: OrderByDirection
  id: OrderByDirection
  status: OrderByDirection
  title: OrderByDirection
  updatedAt: OrderByDirection
}

enum BlogPostStatus {
  PENDING
  RELEASED
}

"""
Boolean expression comparing fields on type "Boolean"
"""
input BooleanFilter {
  eq: Boolean
}

scalar Cursor

scalar DateTime

"""
Boolean expression comparing fields on type "DateTime"
"""
input DateTimeFilter {
  eq: DateTime
}

"""
Boolean expression comparing fields on type "Float"
"""
input FloatFilter {
  eq: Float
}

"""
Boolean expression comparing fields on type "Int"
"""
input IntFilter {
  eq: Int
}

scalar JSON

"""
Boolean expression comparing fields on type "JSON"
"""
input JSONFilter {
  eq: JSON
}

enum OrderByDirection {
  AscNullsFirst
  AscNullsLast
  DescNullsFirst
  DescNullsLast
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

type Query {
  account(nodeId: ID!): Account
  accountCollection(after: Cursor, before: Cursor, filter: AccountFilter, first: Int, last: Int, orderBy: [AccountOrderBy!]): AccountConnection
  blog(nodeId: ID!): Blog
  blogCollection(after: Cursor, before: Cursor, filter: BlogFilter, first: Int, last: Int, orderBy: [BlogOrderBy!]): BlogConnection
  blogPost(nodeId: ID!): BlogPost
  blogPostCollection(after: Cursor, before: Cursor, filter: BlogPostFilter, first: Int, last: Int, orderBy: [BlogPostOrderBy!]): BlogPostConnection
}

"""
Boolean expression comparing fields on type "String"
"""
input StringFilter {
  eq: String
}

scalar UUID

"""
Boolean expression comparing fields on type "UUID"
"""
input UUIDFilter {
  eq: UUID
}
