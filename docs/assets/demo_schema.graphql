type Account {
  id: Int!
  email: String!
  encryptedPassword: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  blogCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: BlogFilter

    """Sort order to apply to the collection"""
    orderBy: [BlogOrderBy!]
  ): BlogConnection
}

type AccountConnection {
  edges: [AccountEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input AccountCreateInput {
  email: String
  encryptedPassword: String
  createdAt: DateTime
  updatedAt: DateTime
}

type AccountEdge {
  cursor: String!
  node: Account
}

input AccountFilter {
  id: IntFilter
  email: StringFilter
  encryptedPassword: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input AccountOrderBy {
  id: OrderByDirection
  email: OrderByDirection
  encryptedPassword: OrderByDirection
  createdAt: OrderByDirection
  updatedAt: OrderByDirection
}

input AccountUpdateInput {
  email: String
  encryptedPassword: String
  createdAt: DateTime
  updatedAt: DateTime
}

scalar BigInt

"""
Boolean expression comparing fields on type "BigInt"
"""
input BigIntFilter {
  eq: BigInt
}

type Blog {
  id: Int!
  ownerId: Int!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  blogPostCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: BlogPostFilter

    """Sort order to apply to the collection"""
    orderBy: [BlogPostOrderBy!]
  ): BlogPostConnection
  owner: Account
}

type BlogConnection {
  edges: [BlogEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input BlogCreateInput {
  ownerId: Int
  name: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
}

type BlogEdge {
  cursor: String!
  node: Blog
}

input BlogFilter {
  id: IntFilter
  ownerId: IntFilter
  name: StringFilter
  description: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input BlogOrderBy {
  id: OrderByDirection
  ownerId: OrderByDirection
  name: OrderByDirection
  description: OrderByDirection
  createdAt: OrderByDirection
  updatedAt: OrderByDirection
}

type BlogPost {
  id: UUID!
  blogId: Int!
  title: String!
  body: String
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  blog: Blog
}

type BlogPostConnection {
  edges: [BlogPostEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input BlogPostCreateInput {
  id: UUID
  blogId: Int
  title: String
  body: String
  status: String
  createdAt: DateTime
  updatedAt: DateTime
}

type BlogPostEdge {
  cursor: String!
  node: BlogPost
}

input BlogPostFilter {
  id: UUIDFilter
  blogId: IntFilter
  title: StringFilter
  body: StringFilter
  status: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input BlogPostOrderBy {
  id: OrderByDirection
  blogId: OrderByDirection
  title: OrderByDirection
  body: OrderByDirection
  status: OrderByDirection
  createdAt: OrderByDirection
  updatedAt: OrderByDirection
}

enum BlogPostStatus {
  PENDING
  RELEASED
}

input BlogPostUpdateInput {
  id: UUID
  blogId: Int
  title: String
  body: String
  status: String
  createdAt: DateTime
  updatedAt: DateTime
}

input BlogUpdateInput {
  ownerId: Int
  name: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
}

"""
Boolean expression comparing fields on type "Boolean"
"""
input BooleanFilter {
  eq: Boolean
}

scalar Cursor

scalar DateTime

"""
Boolean expression comparing fields on type "DateTime"
"""
input DateTimeFilter {
  eq: DateTime
}

"""
Boolean expression comparing fields on type "Float"
"""
input FloatFilter {
  eq: Float
}

"""
Boolean expression comparing fields on type "Int"
"""
input IntFilter {
  eq: Int
}

scalar JSON

"""
Boolean expression comparing fields on type "JSON"
"""
input JSONFilter {
  eq: JSON
}

"""The root type for creating and mutating data"""
type Mutation {
  """Creates a single `Account`"""
  createAccount(object: AccountCreateInput!): Account

  """Creates a single `Blog`"""
  createBlog(object: BlogCreateInput!): Blog

  """Creates a single `BlogPost`"""
  createBlogPost(object: BlogPostCreateInput!): BlogPost

  """Deletes zero or more `Account` from the collection """
  deleteFromAccountCollection(
    """Restricts the mutation's impact to records matching the critera"""
    filter: AccountFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): [Account!]!

  """Deletes zero or more `Blog` from the collection """
  deleteFromBlogCollection(
    """Restricts the mutation's impact to records matching the critera"""
    filter: BlogFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): [Blog!]!

  """Deletes zero or more `BlogPost` from the collection """
  deleteFromBlogPostCollection(
    """Restricts the mutation's impact to records matching the critera"""
    filter: BlogPostFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): [BlogPost!]!

  """Updates zero or more `Account` in the collection"""
  updateAccountCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: AccountUpdateInput!

    """Restricts the mutation's impact to records matching the critera"""
    filter: AccountFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): [Account!]!

  """Updates zero or more `Blog` in the collection"""
  updateBlogCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: BlogUpdateInput!

    """Restricts the mutation's impact to records matching the critera"""
    filter: BlogFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): [Blog!]!

  """Updates zero or more `BlogPost` in the collection"""
  updateBlogPostCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: BlogPostUpdateInput!

    """Restricts the mutation's impact to records matching the critera"""
    filter: BlogPostFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): [BlogPost!]!
}

"""Defines a per-field sorting order"""
enum OrderByDirection {
  AscNullsFirst
  AscNullsLast
  DescNullsFirst
  DescNullsLast
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

"""The root type for querying data"""
type Query {
  """A pagable collection of type `Account`"""
  accountCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: AccountFilter

    """Sort order to apply to the collection"""
    orderBy: [AccountOrderBy!]
  ): AccountConnection

  """A pagable collection of type `Blog`"""
  blogCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: BlogFilter

    """Sort order to apply to the collection"""
    orderBy: [BlogOrderBy!]
  ): BlogConnection

  """A pagable collection of type `BlogPost`"""
  blogPostCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: BlogPostFilter

    """Sort order to apply to the collection"""
    orderBy: [BlogPostOrderBy!]
  ): BlogPostConnection
}

"""
Boolean expression comparing fields on type "String"
"""
input StringFilter {
  eq: String
}

scalar UUID

"""
Boolean expression comparing fields on type "UUID"
"""
input UUIDFilter {
  eq: UUID
}
