begin;
    create table account(
        id serial primary key,
        email varchar(255) not null
    );
    create function _echo_email(account)
        returns text
        language sql
    as $$ select $1.email $$;
    create table blog(
        id serial primary key,
        owner_id integer not null references account(id) on delete cascade,
        name varchar(255) not null
    );
    comment on table blog is e'@graphql({"totalCount": {"enabled": true}})';
    insert into public.account(email)
    values
        ('aardvark@x.com'),
        ('bat@x.com'),
        ('cat@x.com'),
        ('dog@x.com'),
        ('elephant@x.com');
    insert into blog(owner_id, name)
    values
        (1, 'A: Blog 1'),
        (1, 'A: Blog 2'),
        (2, 'A: Blog 3'),
        (2, 'B: Blog 3');
    savepoint a;
    -- Check atMost clause stops deletes
    select graphql.resolve($$
    mutation {
      updateAccountCollection(
        set: {
          email: "new@email.com"
        }
        filter: {
          email: {eq: "bat@x.com"}
        }
        atMost: 0
      ) {
        records { id }
      }
    }
    $$);
                            resolve                            
---------------------------------------------------------------
 {"data": null, "errors": ["update impacts too many records"]}
(1 row)

    rollback to savepoint a;
    -- Check update works and allows nested response
    select graphql.resolve($$
        mutation {
          updateAccountCollection(
            set: {
              email: "new@email.com"
            }
            filter: {
              id: {eq: 2}
            }
            atMost: 1
          ) {
            affectedCount
            records {
              id
              echoEmail
              blogCollection {
                  totalCount
              }
            }
          }
        }
    $$);
                                                                               resolve                                                                                
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"data": {"updateAccountCollection": {"records": [{"id": 2, "echoEmail": "new@email.com", "blogCollection": {"totalCount": 2}}], "affectedCount": 1}}, "errors": []}
(1 row)

    rollback to savepoint a;
    -- Check no matches returns empty array vs null + allows top xyz alias
    select jsonb_pretty(
        graphql.resolve($$
            mutation {
              xyz: updateAccountCollection(
                set: {
                  email: "new@email.com"
                }
                filter: {
                  email: {eq: "no@match.com"}
                }
                atMost: 1
              ) {
                records { id }
              }
            }
        $$)
    );
       jsonb_pretty       
--------------------------
 {                       +
     "data": {           +
         "xyz": {        +
             "records": [+
             ]           +
         }               +
     },                  +
     "errors": [         +
     ]                   +
 }
(1 row)

    rollback to savepoint a;
    -- Check no filter updates all records
    select jsonb_pretty(
        graphql.resolve($$
            mutation {
              updateAccountCollection(
                set: {
                  email: "new@email.com"
                }
                atMost: 8
              ) {
                records { id }
              }
            }
        $$)
    );
             jsonb_pretty             
--------------------------------------
 {                                   +
     "data": {                       +
         "updateAccountCollection": {+
             "records": [            +
                 {                   +
                     "id": 1         +
                 },                  +
                 {                   +
                     "id": 2         +
                 },                  +
                 {                   +
                     "id": 3         +
                 },                  +
                 {                   +
                     "id": 4         +
                 },                  +
                 {                   +
                     "id": 5         +
                 }                   +
             ]                       +
         }                           +
     },                              +
     "errors": [                     +
     ]                               +
 }
(1 row)

    rollback to savepoint a;
    -- forgot `set` arg
    select jsonb_pretty(
        graphql.resolve($$
            mutation {
              xyz: updateAccountCollection(
                filter: {
                  email: {eq: "not_relevant@x.com"}
                }
                atMost: 1
              ) {
                records { id }
              }
            }
        $$)
    );
            jsonb_pretty            
------------------------------------
 {                                 +
     "data": null,                 +
     "errors": [                   +
         "missing argument \"set\""+
     ]                             +
 }
(1 row)

    -- `atMost` can be omitted b/c it has a default
    select graphql.resolve($$
        mutation {
          updateAccountCollection(
            set: {
              email: "new@email.com"
            }
            filter: {
              id: {eq: 2}
            }
          ) {
            records { id }
          }
        }
    $$);
                                    resolve                                    
-------------------------------------------------------------------------------
 {"data": {"updateAccountCollection": {"records": [{"id": 2}]}}, "errors": []}
(1 row)

rollback;
