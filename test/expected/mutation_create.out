begin;
    create table account(
        id serial primary key,
        email varchar(255) not null
    );
    insert into public.account(email)
    values
        ('aardvark@x.com');
    create table blog(
        id serial primary key,
        owner_id integer not null references account(id)
    );
    -- Make sure functions still work
    create function _echo_email(account)
        returns text
        language sql
    as $$ select $1.email $$;
    select graphql.resolve($$
    mutation {
      createAccount(object: {
        email: "foo@barsley.com"
      }) {
        id
        echoEmail
        blogCollection {
            totalCount
        }
      }
    }
    $$);
                                                          resolve                                                          
---------------------------------------------------------------------------------------------------------------------------
 {"data": {"createAccount": {"id": 2, "echoEmail": "foo@barsley.com", "blogCollection": {"totalCount": 0}}}, "errors": []}
(1 row)

    select * from account;
 id |      email      
----+-----------------
  1 | aardvark@x.com
  2 | foo@barsley.com
(2 rows)

    select graphql.resolve($$
    mutation {
      createBlog(object: {
        ownerId: 2
      }) {
        id
        owner {
          id
        }
      }
    }
    $$);
                                resolve                                
-----------------------------------------------------------------------
 {"data": {"createBlog": {"id": 1, "owner": {"id": 2}}}, "errors": []}
(1 row)

    select * from blog;
 id | owner_id 
----+----------
  1 |        2
(1 row)

rollback;
